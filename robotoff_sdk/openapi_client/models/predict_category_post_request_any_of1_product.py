# coding: utf-8

"""
    API Reference

    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.  All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.predict_category_post_request_any_of1_product_nutriments import PredictCategoryPostRequestAnyOf1ProductNutriments
from typing import Optional, Set
from typing_extensions import Self

class PredictCategoryPostRequestAnyOf1Product(BaseModel):
    """
    product information used as model input. All fields are optional, but at least one field must be provided. 
    """ # noqa: E501
    product_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    ingredients_tags: Optional[List[StrictStr]] = Field(default=None, description="the ingredient list, as an ordered list of ingredient tags")
    image_embeddings: Optional[Annotated[List[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=512, max_length=512)]], Field(max_length=10)]] = Field(default=None, description="Embeddings of the 10 most recent product images generated with clip-vit-base-patch32 model. Each item of the list is the embedding of a single image, provided as a list of dimension 512. Shape: (num_images, 512) ")
    ocr: Optional[List[StrictStr]] = Field(default=None, description="A list of string corresponding to the text extracted from the product images with OCR. Each element of the list is the text of a single image, the list order doesn't affect predictions. We use OCR text to detect ingredient mentions and use it as a model input. For optimal results, this field should be provided even if `ingredients_tags` is provided. ")
    nutriments: Optional[PredictCategoryPostRequestAnyOf1ProductNutriments] = None
    __properties: ClassVar[List[str]] = ["product_name", "ingredients_tags", "image_embeddings", "ocr", "nutriments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PredictCategoryPostRequestAnyOf1Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nutriments
        if self.nutriments:
            _dict['nutriments'] = self.nutriments.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PredictCategoryPostRequestAnyOf1Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product_name": obj.get("product_name"),
            "ingredients_tags": obj.get("ingredients_tags"),
            "image_embeddings": obj.get("image_embeddings"),
            "ocr": obj.get("ocr"),
            "nutriments": PredictCategoryPostRequestAnyOf1ProductNutriments.from_dict(obj["nutriments"]) if obj.get("nutriments") is not None else None
        })
        return _obj


