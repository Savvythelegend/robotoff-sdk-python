# coding: utf-8

"""
    API Reference

    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.  All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.images_logos_get200_response import ImagesLogosGet200Response
from openapi_client.models.images_logos_search_get200_response import ImagesLogosSearchGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LogosApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def images_logos_get(
        self,
        logo_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated string of logo IDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesLogosGet200Response:
        """Fetch logos

        Return details about requested logos (maximum 500 logos can be fetched per request).

        :param logo_ids: Comma-separated string of logo IDs
        :type logo_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_get_serialize(
            logo_ids=logo_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagesLogosGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def images_logos_get_with_http_info(
        self,
        logo_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated string of logo IDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesLogosGet200Response]:
        """Fetch logos

        Return details about requested logos (maximum 500 logos can be fetched per request).

        :param logo_ids: Comma-separated string of logo IDs
        :type logo_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_get_serialize(
            logo_ids=logo_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagesLogosGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def images_logos_get_without_preload_content(
        self,
        logo_ids: Annotated[Optional[StrictStr], Field(description="Comma-separated string of logo IDs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch logos

        Return details about requested logos (maximum 500 logos can be fetched per request).

        :param logo_ids: Comma-separated string of logo IDs
        :type logo_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_get_serialize(
            logo_ids=logo_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagesLogosGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _images_logos_get_serialize(
        self,
        logo_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if logo_ids is not None:
            
            _query_params.append(('logo_ids', logo_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/images/logos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def images_logos_logo_id_reset_post(
        self,
        logo_id: Annotated[StrictInt, Field(description="The ID of the logo whose annotation to reset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reset logo annotation

        Reset logo annotations, and delete all annotation-associated predictions and insights

        :param logo_id: The ID of the logo whose annotation to reset (required)
        :type logo_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_logo_id_reset_post_serialize(
            logo_id=logo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def images_logos_logo_id_reset_post_with_http_info(
        self,
        logo_id: Annotated[StrictInt, Field(description="The ID of the logo whose annotation to reset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reset logo annotation

        Reset logo annotations, and delete all annotation-associated predictions and insights

        :param logo_id: The ID of the logo whose annotation to reset (required)
        :type logo_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_logo_id_reset_post_serialize(
            logo_id=logo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def images_logos_logo_id_reset_post_without_preload_content(
        self,
        logo_id: Annotated[StrictInt, Field(description="The ID of the logo whose annotation to reset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reset logo annotation

        Reset logo annotations, and delete all annotation-associated predictions and insights

        :param logo_id: The ID of the logo whose annotation to reset (required)
        :type logo_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_logo_id_reset_post_serialize(
            logo_id=logo_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _images_logos_logo_id_reset_post_serialize(
        self,
        logo_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if logo_id is not None:
            _path_params['logo_id'] = logo_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/images/logos/{logo_id}/reset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def images_logos_search_get(
        self,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        count: Annotated[Optional[Union[Annotated[float, Field(le=2000, strict=True, ge=1)], Annotated[int, Field(le=2000, strict=True, ge=1)]]], Field(description="Number of results to return")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by logo type")] = None,
        value: Annotated[Optional[StrictStr], Field(description="Filter by annotated value")] = None,
        taxonomy_value: Annotated[Optional[StrictStr], Field(description="Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy. This parameter is mutually exclusive with `value`, and should be used for `label` type.")] = None,
        min_confidence: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter logos that have a confidence score above a threshold")] = None,
        random: Annotated[Optional[StrictBool], Field(description="If true, randomized result order")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="The annotation status of the logo. If not provided, both annotated and non-annotated logos are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagesLogosSearchGet200Response:
        """Search for logos

        Search for logos detected using the universal-logo-detector model that  meet some criteria (annotation status, annotated, type,...) 

        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param count: Number of results to return
        :type count: float
        :param type: Filter by logo type
        :type type: str
        :param value: Filter by annotated value
        :type value: str
        :param taxonomy_value: Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy. This parameter is mutually exclusive with `value`, and should be used for `label` type.
        :type taxonomy_value: str
        :param min_confidence: Filter logos that have a confidence score above a threshold
        :type min_confidence: float
        :param random: If true, randomized result order
        :type random: bool
        :param annotated: The annotation status of the logo. If not provided, both annotated and non-annotated logos are returned
        :type annotated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_search_get_serialize(
            server_type=server_type,
            barcode=barcode,
            count=count,
            type=type,
            value=value,
            taxonomy_value=taxonomy_value,
            min_confidence=min_confidence,
            random=random,
            annotated=annotated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagesLogosSearchGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def images_logos_search_get_with_http_info(
        self,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        count: Annotated[Optional[Union[Annotated[float, Field(le=2000, strict=True, ge=1)], Annotated[int, Field(le=2000, strict=True, ge=1)]]], Field(description="Number of results to return")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by logo type")] = None,
        value: Annotated[Optional[StrictStr], Field(description="Filter by annotated value")] = None,
        taxonomy_value: Annotated[Optional[StrictStr], Field(description="Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy. This parameter is mutually exclusive with `value`, and should be used for `label` type.")] = None,
        min_confidence: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter logos that have a confidence score above a threshold")] = None,
        random: Annotated[Optional[StrictBool], Field(description="If true, randomized result order")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="The annotation status of the logo. If not provided, both annotated and non-annotated logos are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagesLogosSearchGet200Response]:
        """Search for logos

        Search for logos detected using the universal-logo-detector model that  meet some criteria (annotation status, annotated, type,...) 

        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param count: Number of results to return
        :type count: float
        :param type: Filter by logo type
        :type type: str
        :param value: Filter by annotated value
        :type value: str
        :param taxonomy_value: Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy. This parameter is mutually exclusive with `value`, and should be used for `label` type.
        :type taxonomy_value: str
        :param min_confidence: Filter logos that have a confidence score above a threshold
        :type min_confidence: float
        :param random: If true, randomized result order
        :type random: bool
        :param annotated: The annotation status of the logo. If not provided, both annotated and non-annotated logos are returned
        :type annotated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_search_get_serialize(
            server_type=server_type,
            barcode=barcode,
            count=count,
            type=type,
            value=value,
            taxonomy_value=taxonomy_value,
            min_confidence=min_confidence,
            random=random,
            annotated=annotated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagesLogosSearchGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def images_logos_search_get_without_preload_content(
        self,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        count: Annotated[Optional[Union[Annotated[float, Field(le=2000, strict=True, ge=1)], Annotated[int, Field(le=2000, strict=True, ge=1)]]], Field(description="Number of results to return")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by logo type")] = None,
        value: Annotated[Optional[StrictStr], Field(description="Filter by annotated value")] = None,
        taxonomy_value: Annotated[Optional[StrictStr], Field(description="Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy. This parameter is mutually exclusive with `value`, and should be used for `label` type.")] = None,
        min_confidence: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filter logos that have a confidence score above a threshold")] = None,
        random: Annotated[Optional[StrictBool], Field(description="If true, randomized result order")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="The annotation status of the logo. If not provided, both annotated and non-annotated logos are returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for logos

        Search for logos detected using the universal-logo-detector model that  meet some criteria (annotation status, annotated, type,...) 

        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param count: Number of results to return
        :type count: float
        :param type: Filter by logo type
        :type type: str
        :param value: Filter by annotated value
        :type value: str
        :param taxonomy_value: Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy. This parameter is mutually exclusive with `value`, and should be used for `label` type.
        :type taxonomy_value: str
        :param min_confidence: Filter logos that have a confidence score above a threshold
        :type min_confidence: float
        :param random: If true, randomized result order
        :type random: bool
        :param annotated: The annotation status of the logo. If not provided, both annotated and non-annotated logos are returned
        :type annotated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_logos_search_get_serialize(
            server_type=server_type,
            barcode=barcode,
            count=count,
            type=type,
            value=value,
            taxonomy_value=taxonomy_value,
            min_confidence=min_confidence,
            random=random,
            annotated=annotated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagesLogosSearchGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _images_logos_search_get_serialize(
        self,
        server_type,
        barcode,
        count,
        type,
        value,
        taxonomy_value,
        min_confidence,
        random,
        annotated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if barcode is not None:
            
            _query_params.append(('barcode', barcode))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if value is not None:
            
            _query_params.append(('value', value))
            
        if taxonomy_value is not None:
            
            _query_params.append(('taxonomy_value', taxonomy_value))
            
        if min_confidence is not None:
            
            _query_params.append(('min_confidence', min_confidence))
            
        if random is not None:
            
            _query_params.append(('random', random))
            
        if annotated is not None:
            
            _query_params.append(('annotated', annotated))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/images/logos/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


