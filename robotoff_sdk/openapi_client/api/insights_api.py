# coding: utf-8

"""
    API Reference

    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.  All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from openapi_client.models.insights_get200_response import InsightsGet200Response
from openapi_client.models.insights_random_get200_response import InsightsRandomGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class InsightsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def insights_annotate_post(
        self,
        insight_id: Annotated[StrictStr, Field(description="ID of the insight")],
        annotation: Annotated[StrictInt, Field(description="Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_, 2 to accept and add data")],
        update: Annotated[Optional[StrictInt], Field(description="Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side")] = None,
        data: Annotated[Optional[Dict[str, Any]], Field(description="Additional data provided by the user as key-value pairs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Submit an annotation

        The annotation can be submitted as an anonymous user or as a registered user. If the user is anonymous, the annotation will be accounted as a vote, and several identical anonymous votes are required to apply the insight. If the vote is sent from a registered user, it is applied directly.  To send the annotation as a registered user, send Open Food Facts credentials to the API using Basic Authentication: add a `Authorization: basic {ENCODED_BASE64}` header where `{ENCODED_BASE64}` is an base64-encoded string of `user:password`. Don't provide an authentication header for anonymous users.  The annotation is an integer that can take 4 values: `0`, `1`, `2`, `-1`. `0` means the insight is incorrect (so it won't be applied), `1` means it is correct (so it will be applied) and `-1` means the insight won't be returned to the user (_skip_). `2` is used when user submit some data to the annotate endpoint  (for example in some cases of category annotation or ingredients spellcheck).  We use the voting mecanism system to remember which insight to skip for a user (authenticated or not). 

        :param insight_id: ID of the insight (required)
        :type insight_id: str
        :param annotation: Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_, 2 to accept and add data (required)
        :type annotation: int
        :param update: Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side
        :type update: int
        :param data: Additional data provided by the user as key-value pairs
        :type data: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_annotate_post_serialize(
            insight_id=insight_id,
            annotation=annotation,
            update=update,
            data=data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insights_annotate_post_with_http_info(
        self,
        insight_id: Annotated[StrictStr, Field(description="ID of the insight")],
        annotation: Annotated[StrictInt, Field(description="Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_, 2 to accept and add data")],
        update: Annotated[Optional[StrictInt], Field(description="Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side")] = None,
        data: Annotated[Optional[Dict[str, Any]], Field(description="Additional data provided by the user as key-value pairs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Submit an annotation

        The annotation can be submitted as an anonymous user or as a registered user. If the user is anonymous, the annotation will be accounted as a vote, and several identical anonymous votes are required to apply the insight. If the vote is sent from a registered user, it is applied directly.  To send the annotation as a registered user, send Open Food Facts credentials to the API using Basic Authentication: add a `Authorization: basic {ENCODED_BASE64}` header where `{ENCODED_BASE64}` is an base64-encoded string of `user:password`. Don't provide an authentication header for anonymous users.  The annotation is an integer that can take 4 values: `0`, `1`, `2`, `-1`. `0` means the insight is incorrect (so it won't be applied), `1` means it is correct (so it will be applied) and `-1` means the insight won't be returned to the user (_skip_). `2` is used when user submit some data to the annotate endpoint  (for example in some cases of category annotation or ingredients spellcheck).  We use the voting mecanism system to remember which insight to skip for a user (authenticated or not). 

        :param insight_id: ID of the insight (required)
        :type insight_id: str
        :param annotation: Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_, 2 to accept and add data (required)
        :type annotation: int
        :param update: Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side
        :type update: int
        :param data: Additional data provided by the user as key-value pairs
        :type data: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_annotate_post_serialize(
            insight_id=insight_id,
            annotation=annotation,
            update=update,
            data=data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insights_annotate_post_without_preload_content(
        self,
        insight_id: Annotated[StrictStr, Field(description="ID of the insight")],
        annotation: Annotated[StrictInt, Field(description="Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_, 2 to accept and add data")],
        update: Annotated[Optional[StrictInt], Field(description="Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side")] = None,
        data: Annotated[Optional[Dict[str, Any]], Field(description="Additional data provided by the user as key-value pairs")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Submit an annotation

        The annotation can be submitted as an anonymous user or as a registered user. If the user is anonymous, the annotation will be accounted as a vote, and several identical anonymous votes are required to apply the insight. If the vote is sent from a registered user, it is applied directly.  To send the annotation as a registered user, send Open Food Facts credentials to the API using Basic Authentication: add a `Authorization: basic {ENCODED_BASE64}` header where `{ENCODED_BASE64}` is an base64-encoded string of `user:password`. Don't provide an authentication header for anonymous users.  The annotation is an integer that can take 4 values: `0`, `1`, `2`, `-1`. `0` means the insight is incorrect (so it won't be applied), `1` means it is correct (so it will be applied) and `-1` means the insight won't be returned to the user (_skip_). `2` is used when user submit some data to the annotate endpoint  (for example in some cases of category annotation or ingredients spellcheck).  We use the voting mecanism system to remember which insight to skip for a user (authenticated or not). 

        :param insight_id: ID of the insight (required)
        :type insight_id: str
        :param annotation: Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_, 2 to accept and add data (required)
        :type annotation: int
        :param update: Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side
        :type update: int
        :param data: Additional data provided by the user as key-value pairs
        :type data: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_annotate_post_serialize(
            insight_id=insight_id,
            annotation=annotation,
            update=update,
            data=data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insights_annotate_post_serialize(
        self,
        insight_id,
        annotation,
        update,
        data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if insight_id is not None:
            _form_params.append(('insight_id', insight_id))
        if annotation is not None:
            _form_params.append(('annotation', annotation))
        if update is not None:
            _form_params.append(('update', update))
        if data is not None:
            _form_params.append(('data', data))
        # process the body parameter



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/insights/annotate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insights_barcode_get(
        self,
        barcode: Annotated[StrictInt, Field(description="The barcode of the product")],
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) Get all insights for a specific product, use GET /insights?barcode={barcode} instead


        :param barcode: The barcode of the product (required)
        :type barcode: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /insights/{barcode} is deprecated.", DeprecationWarning)

        _param = self._insights_barcode_get_serialize(
            barcode=barcode,
            server_type=server_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insights_barcode_get_with_http_info(
        self,
        barcode: Annotated[StrictInt, Field(description="The barcode of the product")],
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) Get all insights for a specific product, use GET /insights?barcode={barcode} instead


        :param barcode: The barcode of the product (required)
        :type barcode: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /insights/{barcode} is deprecated.", DeprecationWarning)

        _param = self._insights_barcode_get_serialize(
            barcode=barcode,
            server_type=server_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insights_barcode_get_without_preload_content(
        self,
        barcode: Annotated[StrictInt, Field(description="The barcode of the product")],
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get all insights for a specific product, use GET /insights?barcode={barcode} instead


        :param barcode: The barcode of the product (required)
        :type barcode: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /insights/{barcode} is deprecated.", DeprecationWarning)

        _param = self._insights_barcode_get_serialize(
            barcode=barcode,
            server_type=server_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insights_barcode_get_serialize(
        self,
        barcode,
        server_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if barcode is not None:
            _path_params['barcode'] = barcode
        # process the query parameters
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/insights/{barcode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insights_detail_id_get(
        self,
        id: Annotated[StrictStr, Field(description="ID of the insight")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get a specific insight


        :param id: ID of the insight (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_detail_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insights_detail_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the insight")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get a specific insight


        :param id: ID of the insight (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_detail_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insights_detail_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the insight")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a specific insight


        :param id: ID of the insight (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_detail_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insights_detail_id_get_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/insights/detail/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insights_dump_get(
        self,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="The annotation status of the insight. If not provided, both annotated and non-annotated insights are returned")] = None,
        count: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="Maximum number of insights to return. If not provided, an HTTP 400 response may be returned if more than 10,000 insights match the criteria")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Generate a CSV dump

        Generate a CSV dump of insights with specific criteria. If more than 10,000 insights match provided criteria and `count` is not provided, a `HTTP 400` is returned 

        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param annotated: The annotation status of the insight. If not provided, both annotated and non-annotated insights are returned
        :type annotated: bool
        :param count: Maximum number of insights to return. If not provided, an HTTP 400 response may be returned if more than 10,000 insights match the criteria
        :type count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_dump_get_serialize(
            server_type=server_type,
            value_tag=value_tag,
            insight_types=insight_types,
            barcode=barcode,
            annotated=annotated,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '204': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insights_dump_get_with_http_info(
        self,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="The annotation status of the insight. If not provided, both annotated and non-annotated insights are returned")] = None,
        count: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="Maximum number of insights to return. If not provided, an HTTP 400 response may be returned if more than 10,000 insights match the criteria")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Generate a CSV dump

        Generate a CSV dump of insights with specific criteria. If more than 10,000 insights match provided criteria and `count` is not provided, a `HTTP 400` is returned 

        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param annotated: The annotation status of the insight. If not provided, both annotated and non-annotated insights are returned
        :type annotated: bool
        :param count: Maximum number of insights to return. If not provided, an HTTP 400 response may be returned if more than 10,000 insights match the criteria
        :type count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_dump_get_serialize(
            server_type=server_type,
            value_tag=value_tag,
            insight_types=insight_types,
            barcode=barcode,
            annotated=annotated,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '204': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insights_dump_get_without_preload_content(
        self,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="The annotation status of the insight. If not provided, both annotated and non-annotated insights are returned")] = None,
        count: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="Maximum number of insights to return. If not provided, an HTTP 400 response may be returned if more than 10,000 insights match the criteria")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate a CSV dump

        Generate a CSV dump of insights with specific criteria. If more than 10,000 insights match provided criteria and `count` is not provided, a `HTTP 400` is returned 

        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param annotated: The annotation status of the insight. If not provided, both annotated and non-annotated insights are returned
        :type annotated: bool
        :param count: Maximum number of insights to return. If not provided, an HTTP 400 response may be returned if more than 10,000 insights match the criteria
        :type count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_dump_get_serialize(
            server_type=server_type,
            value_tag=value_tag,
            insight_types=insight_types,
            barcode=barcode,
            annotated=annotated,
            count=count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '204': None,
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insights_dump_get_serialize(
        self,
        server_type,
        value_tag,
        insight_types,
        barcode,
        annotated,
        count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if value_tag is not None:
            
            _query_params.append(('value_tag', value_tag))
            
        if insight_types is not None:
            
            _query_params.append(('insight_types', insight_types))
            
        if barcode is not None:
            
            _query_params.append(('barcode', barcode))
            
        if annotated is not None:
            
            _query_params.append(('annotated', annotated))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/insights/dump',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insights_get(
        self,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        barcode: Annotated[Optional[StrictInt], Field(description="Filter by barcode value")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="Filter by annotation status of the insight. A true value (`1`, `true`) means we only return annotated insights, a false value (`0`, `false`) only non-annotated insights. If the parameter is not provided, both annotated and non-annotated insights are returned.")] = None,
        annotation: Annotated[Optional[StrictInt], Field(description="Filter by annotation value of the insight. If not provided, all insights are returned. This works in conjunction with the `annotated` parameter.")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="How to order by insight results. By default, results are not ordered. Possible values are:   - `random`: insights are ordered randomly   - `popularity`: insights are returned by decreasing popularity, using the number of scans as proxy ")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        lc: Annotated[Optional[StrictStr], Field(description="Comma-separated list of language codes to filter insights by language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InsightsGet200Response:
        """List insights


        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param barcode: Filter by barcode value
        :type barcode: int
        :param annotated: Filter by annotation status of the insight. A true value (`1`, `true`) means we only return annotated insights, a false value (`0`, `false`) only non-annotated insights. If the parameter is not provided, both annotated and non-annotated insights are returned.
        :type annotated: bool
        :param annotation: Filter by annotation value of the insight. If not provided, all insights are returned. This works in conjunction with the `annotated` parameter.
        :type annotation: int
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param order_by: How to order by insight results. By default, results are not ordered. Possible values are:   - `random`: insights are ordered randomly   - `popularity`: insights are returned by decreasing popularity, using the number of scans as proxy 
        :type order_by: str
        :param count: The number of items to return
        :type count: int
        :param page: Page index to return (starting at 1)
        :type page: int
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param lc: Comma-separated list of language codes to filter insights by language
        :type lc: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_get_serialize(
            insight_types=insight_types,
            barcode=barcode,
            annotated=annotated,
            annotation=annotation,
            value_tag=value_tag,
            brands=brands,
            countries=countries,
            server_type=server_type,
            predictor=predictor,
            order_by=order_by,
            count=count,
            page=page,
            campaigns=campaigns,
            lc=lc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InsightsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insights_get_with_http_info(
        self,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        barcode: Annotated[Optional[StrictInt], Field(description="Filter by barcode value")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="Filter by annotation status of the insight. A true value (`1`, `true`) means we only return annotated insights, a false value (`0`, `false`) only non-annotated insights. If the parameter is not provided, both annotated and non-annotated insights are returned.")] = None,
        annotation: Annotated[Optional[StrictInt], Field(description="Filter by annotation value of the insight. If not provided, all insights are returned. This works in conjunction with the `annotated` parameter.")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="How to order by insight results. By default, results are not ordered. Possible values are:   - `random`: insights are ordered randomly   - `popularity`: insights are returned by decreasing popularity, using the number of scans as proxy ")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        lc: Annotated[Optional[StrictStr], Field(description="Comma-separated list of language codes to filter insights by language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InsightsGet200Response]:
        """List insights


        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param barcode: Filter by barcode value
        :type barcode: int
        :param annotated: Filter by annotation status of the insight. A true value (`1`, `true`) means we only return annotated insights, a false value (`0`, `false`) only non-annotated insights. If the parameter is not provided, both annotated and non-annotated insights are returned.
        :type annotated: bool
        :param annotation: Filter by annotation value of the insight. If not provided, all insights are returned. This works in conjunction with the `annotated` parameter.
        :type annotation: int
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param order_by: How to order by insight results. By default, results are not ordered. Possible values are:   - `random`: insights are ordered randomly   - `popularity`: insights are returned by decreasing popularity, using the number of scans as proxy 
        :type order_by: str
        :param count: The number of items to return
        :type count: int
        :param page: Page index to return (starting at 1)
        :type page: int
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param lc: Comma-separated list of language codes to filter insights by language
        :type lc: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_get_serialize(
            insight_types=insight_types,
            barcode=barcode,
            annotated=annotated,
            annotation=annotation,
            value_tag=value_tag,
            brands=brands,
            countries=countries,
            server_type=server_type,
            predictor=predictor,
            order_by=order_by,
            count=count,
            page=page,
            campaigns=campaigns,
            lc=lc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InsightsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insights_get_without_preload_content(
        self,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        barcode: Annotated[Optional[StrictInt], Field(description="Filter by barcode value")] = None,
        annotated: Annotated[Optional[StrictBool], Field(description="Filter by annotation status of the insight. A true value (`1`, `true`) means we only return annotated insights, a false value (`0`, `false`) only non-annotated insights. If the parameter is not provided, both annotated and non-annotated insights are returned.")] = None,
        annotation: Annotated[Optional[StrictInt], Field(description="Filter by annotation value of the insight. If not provided, all insights are returned. This works in conjunction with the `annotated` parameter.")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="How to order by insight results. By default, results are not ordered. Possible values are:   - `random`: insights are ordered randomly   - `popularity`: insights are returned by decreasing popularity, using the number of scans as proxy ")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        lc: Annotated[Optional[StrictStr], Field(description="Comma-separated list of language codes to filter insights by language")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List insights


        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param barcode: Filter by barcode value
        :type barcode: int
        :param annotated: Filter by annotation status of the insight. A true value (`1`, `true`) means we only return annotated insights, a false value (`0`, `false`) only non-annotated insights. If the parameter is not provided, both annotated and non-annotated insights are returned.
        :type annotated: bool
        :param annotation: Filter by annotation value of the insight. If not provided, all insights are returned. This works in conjunction with the `annotated` parameter.
        :type annotation: int
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param order_by: How to order by insight results. By default, results are not ordered. Possible values are:   - `random`: insights are ordered randomly   - `popularity`: insights are returned by decreasing popularity, using the number of scans as proxy 
        :type order_by: str
        :param count: The number of items to return
        :type count: int
        :param page: Page index to return (starting at 1)
        :type page: int
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param lc: Comma-separated list of language codes to filter insights by language
        :type lc: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insights_get_serialize(
            insight_types=insight_types,
            barcode=barcode,
            annotated=annotated,
            annotation=annotation,
            value_tag=value_tag,
            brands=brands,
            countries=countries,
            server_type=server_type,
            predictor=predictor,
            order_by=order_by,
            count=count,
            page=page,
            campaigns=campaigns,
            lc=lc,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InsightsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insights_get_serialize(
        self,
        insight_types,
        barcode,
        annotated,
        annotation,
        value_tag,
        brands,
        countries,
        server_type,
        predictor,
        order_by,
        count,
        page,
        campaigns,
        lc,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if insight_types is not None:
            
            _query_params.append(('insight_types', insight_types))
            
        if barcode is not None:
            
            _query_params.append(('barcode', barcode))
            
        if annotated is not None:
            
            _query_params.append(('annotated', annotated))
            
        if annotation is not None:
            
            _query_params.append(('annotation', annotation))
            
        if value_tag is not None:
            
            _query_params.append(('value_tag', value_tag))
            
        if brands is not None:
            
            _query_params.append(('brands', brands))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if predictor is not None:
            
            _query_params.append(('predictor', predictor))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if campaigns is not None:
            
            _query_params.append(('campaigns', campaigns))
            
        if lc is not None:
            
            _query_params.append(('lc', lc))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/insights',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insights_random_get(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Filter by insight type")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InsightsRandomGet200Response:
        """(Deprecated) Get a random insight, use GET /insights?order_by=random instead


        :param type: Filter by insight type
        :type type: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param count: The number of items to return
        :type count: int
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /insights/random is deprecated.", DeprecationWarning)

        _param = self._insights_random_get_serialize(
            type=type,
            countries=countries,
            value_tag=value_tag,
            server_type=server_type,
            count=count,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InsightsRandomGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insights_random_get_with_http_info(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Filter by insight type")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InsightsRandomGet200Response]:
        """(Deprecated) Get a random insight, use GET /insights?order_by=random instead


        :param type: Filter by insight type
        :type type: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param count: The number of items to return
        :type count: int
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /insights/random is deprecated.", DeprecationWarning)

        _param = self._insights_random_get_serialize(
            type=type,
            countries=countries,
            value_tag=value_tag,
            server_type=server_type,
            count=count,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InsightsRandomGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insights_random_get_without_preload_content(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Filter by insight type")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get a random insight, use GET /insights?order_by=random instead


        :param type: Filter by insight type
        :type type: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param count: The number of items to return
        :type count: int
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /insights/random is deprecated.", DeprecationWarning)

        _param = self._insights_random_get_serialize(
            type=type,
            countries=countries,
            value_tag=value_tag,
            server_type=server_type,
            count=count,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InsightsRandomGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insights_random_get_serialize(
        self,
        type,
        countries,
        value_tag,
        server_type,
        count,
        predictor,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if value_tag is not None:
            
            _query_params.append(('value_tag', value_tag))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if predictor is not None:
            
            _query_params.append(('predictor', predictor))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/insights/random',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


