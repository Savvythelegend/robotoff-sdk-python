# coding: utf-8

"""
    API Reference

    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.  All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.predict_lang_product_get200_response_counts_inner import PredictLangProductGet200ResponseCountsInner
from openapi_client.models.predict_lang_product_get200_response_percent_inner import PredictLangProductGet200ResponsePercentInner
from typing import Optional, Set
from typing_extensions import Self

class PredictLangProductGet200Response(BaseModel):
    """
    PredictLangProductGet200Response
    """ # noqa: E501
    counts: Optional[List[PredictLangProductGet200ResponseCountsInner]] = Field(default=None, description="the number of words detected for each language, over all images, sorted by descending count ")
    percent: Optional[List[PredictLangProductGet200ResponsePercentInner]] = Field(default=None, description="the percentage of words detected for each language, over all images, sorted by descending percentage ")
    image_ids: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="the IDs of the images that were used to generate the predictions ")
    __properties: ClassVar[List[str]] = ["counts", "percent", "image_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PredictLangProductGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in counts (list)
        _items = []
        if self.counts:
            for _item_counts in self.counts:
                if _item_counts:
                    _items.append(_item_counts.to_dict())
            _dict['counts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in percent (list)
        _items = []
        if self.percent:
            for _item_percent in self.percent:
                if _item_percent:
                    _items.append(_item_percent.to_dict())
            _dict['percent'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PredictLangProductGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counts": [PredictLangProductGet200ResponseCountsInner.from_dict(_item) for _item in obj["counts"]] if obj.get("counts") is not None else None,
            "percent": [PredictLangProductGet200ResponsePercentInner.from_dict(_item) for _item in obj["percent"]] if obj.get("percent") is not None else None,
            "image_ids": obj.get("image_ids")
        })
        return _obj


