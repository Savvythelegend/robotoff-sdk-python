# coding: utf-8

"""
    API Reference

    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.  All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PredictCategoryPostRequestAnyOf1ProductNutriments(BaseModel):
    """
    Nutriment values. These fields have exactly the same meaning as those of Product Opener. All fields are optional, only send data for the field for which the value is not missing. 
    """ # noqa: E501
    fat_100g: Optional[Union[StrictFloat, StrictInt]] = None
    saturated_fat_100g: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="saturated-fat_100g")
    carbohydrates_100g: Optional[Union[StrictFloat, StrictInt]] = None
    sugars_100g: Optional[Union[StrictFloat, StrictInt]] = None
    fiber_100g: Optional[Union[StrictFloat, StrictInt]] = None
    proteins_100g: Optional[Union[StrictFloat, StrictInt]] = None
    salt_100g: Optional[Union[StrictFloat, StrictInt]] = None
    energy_kcal_100g: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="energy-kcal_100g")
    fruits_vegetables_nuts_100g: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="fruits-vegetables-nuts_100g")
    __properties: ClassVar[List[str]] = ["fat_100g", "saturated-fat_100g", "carbohydrates_100g", "sugars_100g", "fiber_100g", "proteins_100g", "salt_100g", "energy-kcal_100g", "fruits-vegetables-nuts_100g"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PredictCategoryPostRequestAnyOf1ProductNutriments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PredictCategoryPostRequestAnyOf1ProductNutriments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fat_100g": obj.get("fat_100g"),
            "saturated-fat_100g": obj.get("saturated-fat_100g"),
            "carbohydrates_100g": obj.get("carbohydrates_100g"),
            "sugars_100g": obj.get("sugars_100g"),
            "fiber_100g": obj.get("fiber_100g"),
            "proteins_100g": obj.get("proteins_100g"),
            "salt_100g": obj.get("salt_100g"),
            "energy-kcal_100g": obj.get("energy-kcal_100g"),
            "fruits-vegetables-nuts_100g": obj.get("fruits-vegetables-nuts_100g")
        })
        return _obj


