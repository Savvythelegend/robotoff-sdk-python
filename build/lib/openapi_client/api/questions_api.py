# coding: utf-8

"""
    API Reference

    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.  All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.questions_barcode_get200_response import QuestionsBarcodeGet200Response
from openapi_client.models.questions_get200_response import QuestionsGet200Response
from openapi_client.models.questions_unanswered_get200_response import QuestionsUnansweredGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class QuestionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def questions_barcode_get(
        self,
        barcode: Annotated[StrictInt, Field(description="The barcode of the product")],
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of questions to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QuestionsBarcodeGet200Response:
        """Get questions for a given product

        Questions are sorted by priority: we want questions with highest impact to be displayed first. The order is the following:   - category   - label   - brand   - remaining types 

        :param barcode: The barcode of the product (required)
        :type barcode: int
        :param count: The number of questions to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param lang: The language of the question/value
        :type lang: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_barcode_get_serialize(
            barcode=barcode,
            count=count,
            server_type=server_type,
            lang=lang,
            insight_types=insight_types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsBarcodeGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def questions_barcode_get_with_http_info(
        self,
        barcode: Annotated[StrictInt, Field(description="The barcode of the product")],
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of questions to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QuestionsBarcodeGet200Response]:
        """Get questions for a given product

        Questions are sorted by priority: we want questions with highest impact to be displayed first. The order is the following:   - category   - label   - brand   - remaining types 

        :param barcode: The barcode of the product (required)
        :type barcode: int
        :param count: The number of questions to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param lang: The language of the question/value
        :type lang: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_barcode_get_serialize(
            barcode=barcode,
            count=count,
            server_type=server_type,
            lang=lang,
            insight_types=insight_types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsBarcodeGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def questions_barcode_get_without_preload_content(
        self,
        barcode: Annotated[StrictInt, Field(description="The barcode of the product")],
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of questions to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get questions for a given product

        Questions are sorted by priority: we want questions with highest impact to be displayed first. The order is the following:   - category   - label   - brand   - remaining types 

        :param barcode: The barcode of the product (required)
        :type barcode: int
        :param count: The number of questions to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param lang: The language of the question/value
        :type lang: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_barcode_get_serialize(
            barcode=barcode,
            count=count,
            server_type=server_type,
            lang=lang,
            insight_types=insight_types,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsBarcodeGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _questions_barcode_get_serialize(
        self,
        barcode,
        count,
        server_type,
        lang,
        insight_types,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if barcode is not None:
            _path_params['barcode'] = barcode
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if insight_types is not None:
            
            _query_params.append(('insight_types', insight_types))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/questions/{barcode}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def questions_get(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="The field to use for ordering results:   - confidence: order by (descending) model confidence, null confidence insights come last   - popularity: order by (descending) popularity (=scan count)   - random: use a random order ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QuestionsGet200Response:
        """Fetch questions


        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param order_by: The field to use for ordering results:   - confidence: order by (descending) model confidence, null confidence insights come last   - popularity: order by (descending) popularity (=scan count)   - random: use a random order 
        :type order_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            order_by=order_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def questions_get_with_http_info(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="The field to use for ordering results:   - confidence: order by (descending) model confidence, null confidence insights come last   - popularity: order by (descending) popularity (=scan count)   - random: use a random order ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QuestionsGet200Response]:
        """Fetch questions


        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param order_by: The field to use for ordering results:   - confidence: order by (descending) model confidence, null confidence insights come last   - popularity: order by (descending) popularity (=scan count)   - random: use a random order 
        :type order_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            order_by=order_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def questions_get_without_preload_content(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        order_by: Annotated[Optional[StrictStr], Field(description="The field to use for ordering results:   - confidence: order by (descending) model confidence, null confidence insights come last   - popularity: order by (descending) popularity (=scan count)   - random: use a random order ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch questions


        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param order_by: The field to use for ordering results:   - confidence: order by (descending) model confidence, null confidence insights come last   - popularity: order by (descending) popularity (=scan count)   - random: use a random order 
        :type order_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            order_by=order_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _questions_get_serialize(
        self,
        lang,
        count,
        server_type,
        insight_types,
        countries,
        brands,
        value_tag,
        page,
        reserved_barcode,
        campaigns,
        predictor,
        order_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if insight_types is not None:
            
            _query_params.append(('insight_types', insight_types))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if brands is not None:
            
            _query_params.append(('brands', brands))
            
        if value_tag is not None:
            
            _query_params.append(('value_tag', value_tag))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if reserved_barcode is not None:
            
            _query_params.append(('reserved_barcode', reserved_barcode))
            
        if campaigns is not None:
            
            _query_params.append(('campaigns', campaigns))
            
        if predictor is not None:
            
            _query_params.append(('predictor', predictor))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/questions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def questions_popular_get(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """(Deprecated) Get questions about popular products

        Questions are ranked by the product popularity (based on scan count). 

        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /questions/popular is deprecated.", DeprecationWarning)

        _param = self._questions_popular_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def questions_popular_get_with_http_info(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """(Deprecated) Get questions about popular products

        Questions are ranked by the product popularity (based on scan count). 

        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /questions/popular is deprecated.", DeprecationWarning)

        _param = self._questions_popular_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def questions_popular_get_without_preload_content(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get questions about popular products

        Questions are ranked by the product popularity (based on scan count). 

        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /questions/popular is deprecated.", DeprecationWarning)

        _param = self._questions_popular_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _questions_popular_get_serialize(
        self,
        lang,
        count,
        server_type,
        insight_types,
        countries,
        brands,
        value_tag,
        page,
        reserved_barcode,
        campaigns,
        predictor,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if insight_types is not None:
            
            _query_params.append(('insight_types', insight_types))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if brands is not None:
            
            _query_params.append(('brands', brands))
            
        if value_tag is not None:
            
            _query_params.append(('value_tag', value_tag))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if reserved_barcode is not None:
            
            _query_params.append(('reserved_barcode', reserved_barcode))
            
        if campaigns is not None:
            
            _query_params.append(('campaigns', campaigns))
            
        if predictor is not None:
            
            _query_params.append(('predictor', predictor))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/questions/popular',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def questions_random_get(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QuestionsGet200Response:
        """(Deprecated) Get random questions


        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /questions/random is deprecated.", DeprecationWarning)

        _param = self._questions_random_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def questions_random_get_with_http_info(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QuestionsGet200Response]:
        """(Deprecated) Get random questions


        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /questions/random is deprecated.", DeprecationWarning)

        _param = self._questions_random_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def questions_random_get_without_preload_content(
        self,
        lang: Annotated[Optional[StrictStr], Field(description="The language of the question/value")] = None,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        insight_types: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by insight types")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        brands: Annotated[Optional[StrictStr], Field(description="Comma-separated list, filter by brands")] = None,
        value_tag: Annotated[Optional[StrictStr], Field(description="Filter by value tag, i.e the value that is going to be sent to Product Opener")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Get random questions


        :param lang: The language of the question/value
        :type lang: str
        :param count: The number of items to return
        :type count: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param insight_types: Comma-separated list, filter by insight types
        :type insight_types: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param brands: Comma-separated list, filter by brands
        :type brands: str
        :param value_tag: Filter by value tag, i.e the value that is going to be sent to Product Opener
        :type value_tag: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /questions/random is deprecated.", DeprecationWarning)

        _param = self._questions_random_get_serialize(
            lang=lang,
            count=count,
            server_type=server_type,
            insight_types=insight_types,
            countries=countries,
            brands=brands,
            value_tag=value_tag,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _questions_random_get_serialize(
        self,
        lang,
        count,
        server_type,
        insight_types,
        countries,
        brands,
        value_tag,
        page,
        reserved_barcode,
        campaigns,
        predictor,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        if count is not None:
            
            _query_params.append(('count', count))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if insight_types is not None:
            
            _query_params.append(('insight_types', insight_types))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if brands is not None:
            
            _query_params.append(('brands', brands))
            
        if value_tag is not None:
            
            _query_params.append(('value_tag', value_tag))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if reserved_barcode is not None:
            
            _query_params.append(('reserved_barcode', reserved_barcode))
            
        if campaigns is not None:
            
            _query_params.append(('campaigns', campaigns))
            
        if predictor is not None:
            
            _query_params.append(('predictor', predictor))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/questions/random',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def questions_unanswered_get(
        self,
        count: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="The number of distinct `value_tag`s to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by insight type")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QuestionsUnansweredGet200Response:
        """Get unanswered question counts

        Get number of unanswered questions grouped by `value_tag`. The list is ordered from highest count to lowest. 

        :param count: The number of distinct `value_tag`s to return
        :type count: float
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param type: Filter by insight type
        :type type: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_unanswered_get_serialize(
            count=count,
            server_type=server_type,
            type=type,
            countries=countries,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsUnansweredGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def questions_unanswered_get_with_http_info(
        self,
        count: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="The number of distinct `value_tag`s to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by insight type")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QuestionsUnansweredGet200Response]:
        """Get unanswered question counts

        Get number of unanswered questions grouped by `value_tag`. The list is ordered from highest count to lowest. 

        :param count: The number of distinct `value_tag`s to return
        :type count: float
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param type: Filter by insight type
        :type type: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_unanswered_get_serialize(
            count=count,
            server_type=server_type,
            type=type,
            countries=countries,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsUnansweredGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def questions_unanswered_get_without_preload_content(
        self,
        count: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="The number of distinct `value_tag`s to return")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by insight type")] = None,
        countries: Annotated[Optional[StrictStr], Field(description="Comma separated list, filter by country value (2-letter code)")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        reserved_barcode: Annotated[Optional[StrictBool], Field(description="If true, also return questions about products with reserved barcodes")] = None,
        campaigns: Annotated[Optional[StrictStr], Field(description="Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.")] = None,
        predictor: Annotated[Optional[StrictStr], Field(description="Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get unanswered question counts

        Get number of unanswered questions grouped by `value_tag`. The list is ordered from highest count to lowest. 

        :param count: The number of distinct `value_tag`s to return
        :type count: float
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param type: Filter by insight type
        :type type: str
        :param countries: Comma separated list, filter by country value (2-letter code)
        :type countries: str
        :param page: Page index to return (starting at 1)
        :type page: int
        :param reserved_barcode: If true, also return questions about products with reserved barcodes
        :type reserved_barcode: bool
        :param campaigns: Filter by annotation campaigns (the insight must have all the campaigns) An annotation campaign allows to only retrieve questions or insights based on arbitrary criteria defined during insight import.
        :type campaigns: str
        :param predictor: Filter by predictor value A predictor refers to the model/method that was used to generate the prediction.
        :type predictor: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._questions_unanswered_get_serialize(
            count=count,
            server_type=server_type,
            type=type,
            countries=countries,
            page=page,
            reserved_barcode=reserved_barcode,
            campaigns=campaigns,
            predictor=predictor,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QuestionsUnansweredGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _questions_unanswered_get_serialize(
        self,
        count,
        server_type,
        type,
        countries,
        page,
        reserved_barcode,
        campaigns,
        predictor,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if reserved_barcode is not None:
            
            _query_params.append(('reserved_barcode', reserved_barcode))
            
        if campaigns is not None:
            
            _query_params.append(('campaigns', campaigns))
            
        if predictor is not None:
            
            _query_params.append(('predictor', predictor))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/questions/unanswered',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


