# coding: utf-8

"""
    API Reference

    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.  All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.image_predictions_get200_response import ImagePredictionsGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ImagePredictionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def image_predictions_get(
        self,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        with_logo: Annotated[Optional[StrictBool], Field(description="if True, only return image predictions that have associated logos (only valid for universal-logo-detector image predictions). If false, only return image predictions that have no associated logos. Otherwise, return all image predictions.")] = None,
        model_name: Annotated[Optional[StrictStr], Field(description="filter by name of the image predictor model")] = None,
        image_id: Annotated[Optional[StrictStr], Field(description="filter by image ID. It should be a digit (raw images only), otherwise no result will be returned.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="filter by type of the image predictor model")] = None,
        model_version: Annotated[Optional[StrictStr], Field(description="filter by model version value")] = None,
        min_confidence: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="filter by minimum confidence score value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImagePredictionsGet200Response:
        """Get image predictions


        :param count: The number of items to return
        :type count: int
        :param page: Page index to return (starting at 1)
        :type page: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param with_logo: if True, only return image predictions that have associated logos (only valid for universal-logo-detector image predictions). If false, only return image predictions that have no associated logos. Otherwise, return all image predictions.
        :type with_logo: bool
        :param model_name: filter by name of the image predictor model
        :type model_name: str
        :param image_id: filter by image ID. It should be a digit (raw images only), otherwise no result will be returned.
        :type image_id: str
        :param type: filter by type of the image predictor model
        :type type: str
        :param model_version: filter by model version value
        :type model_version: str
        :param min_confidence: filter by minimum confidence score value
        :type min_confidence: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._image_predictions_get_serialize(
            count=count,
            page=page,
            server_type=server_type,
            barcode=barcode,
            with_logo=with_logo,
            model_name=model_name,
            image_id=image_id,
            type=type,
            model_version=model_version,
            min_confidence=min_confidence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagePredictionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def image_predictions_get_with_http_info(
        self,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        with_logo: Annotated[Optional[StrictBool], Field(description="if True, only return image predictions that have associated logos (only valid for universal-logo-detector image predictions). If false, only return image predictions that have no associated logos. Otherwise, return all image predictions.")] = None,
        model_name: Annotated[Optional[StrictStr], Field(description="filter by name of the image predictor model")] = None,
        image_id: Annotated[Optional[StrictStr], Field(description="filter by image ID. It should be a digit (raw images only), otherwise no result will be returned.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="filter by type of the image predictor model")] = None,
        model_version: Annotated[Optional[StrictStr], Field(description="filter by model version value")] = None,
        min_confidence: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="filter by minimum confidence score value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImagePredictionsGet200Response]:
        """Get image predictions


        :param count: The number of items to return
        :type count: int
        :param page: Page index to return (starting at 1)
        :type page: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param with_logo: if True, only return image predictions that have associated logos (only valid for universal-logo-detector image predictions). If false, only return image predictions that have no associated logos. Otherwise, return all image predictions.
        :type with_logo: bool
        :param model_name: filter by name of the image predictor model
        :type model_name: str
        :param image_id: filter by image ID. It should be a digit (raw images only), otherwise no result will be returned.
        :type image_id: str
        :param type: filter by type of the image predictor model
        :type type: str
        :param model_version: filter by model version value
        :type model_version: str
        :param min_confidence: filter by minimum confidence score value
        :type min_confidence: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._image_predictions_get_serialize(
            count=count,
            page=page,
            server_type=server_type,
            barcode=barcode,
            with_logo=with_logo,
            model_name=model_name,
            image_id=image_id,
            type=type,
            model_version=model_version,
            min_confidence=min_confidence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagePredictionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def image_predictions_get_without_preload_content(
        self,
        count: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The number of items to return")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page index to return (starting at 1)")] = None,
        server_type: Annotated[Optional[StrictStr], Field(description="The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...")] = None,
        barcode: Annotated[Optional[StrictStr], Field(description="Filter by barcode value")] = None,
        with_logo: Annotated[Optional[StrictBool], Field(description="if True, only return image predictions that have associated logos (only valid for universal-logo-detector image predictions). If false, only return image predictions that have no associated logos. Otherwise, return all image predictions.")] = None,
        model_name: Annotated[Optional[StrictStr], Field(description="filter by name of the image predictor model")] = None,
        image_id: Annotated[Optional[StrictStr], Field(description="filter by image ID. It should be a digit (raw images only), otherwise no result will be returned.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="filter by type of the image predictor model")] = None,
        model_version: Annotated[Optional[StrictStr], Field(description="filter by model version value")] = None,
        min_confidence: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="filter by minimum confidence score value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get image predictions


        :param count: The number of items to return
        :type count: int
        :param page: Page index to return (starting at 1)
        :type page: int
        :param server_type: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
        :type server_type: str
        :param barcode: Filter by barcode value
        :type barcode: str
        :param with_logo: if True, only return image predictions that have associated logos (only valid for universal-logo-detector image predictions). If false, only return image predictions that have no associated logos. Otherwise, return all image predictions.
        :type with_logo: bool
        :param model_name: filter by name of the image predictor model
        :type model_name: str
        :param image_id: filter by image ID. It should be a digit (raw images only), otherwise no result will be returned.
        :type image_id: str
        :param type: filter by type of the image predictor model
        :type type: str
        :param model_version: filter by model version value
        :type model_version: str
        :param min_confidence: filter by minimum confidence score value
        :type min_confidence: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._image_predictions_get_serialize(
            count=count,
            page=page,
            server_type=server_type,
            barcode=barcode,
            with_logo=with_logo,
            model_name=model_name,
            image_id=image_id,
            type=type,
            model_version=model_version,
            min_confidence=min_confidence,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImagePredictionsGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _image_predictions_get_serialize(
        self,
        count,
        page,
        server_type,
        barcode,
        with_logo,
        model_name,
        image_id,
        type,
        model_version,
        min_confidence,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if count is not None:
            
            _query_params.append(('count', count))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if server_type is not None:
            
            _query_params.append(('server_type', server_type))
            
        if barcode is not None:
            
            _query_params.append(('barcode', barcode))
            
        if with_logo is not None:
            
            _query_params.append(('with_logo', with_logo))
            
        if model_name is not None:
            
            _query_params.append(('model_name', model_name))
            
        if image_id is not None:
            
            _query_params.append(('image_id', image_id))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if model_version is not None:
            
            _query_params.append(('model_version', model_version))
            
        if min_confidence is not None:
            
            _query_params.append(('min_confidence', min_confidence))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/image_predictions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


